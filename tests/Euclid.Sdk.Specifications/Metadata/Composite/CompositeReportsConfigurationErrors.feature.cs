// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.0.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Euclid.Sdk.Metadata.Metadata.Composite
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("In order to learn if my composite app is configured correctly\r\nAs a composite app" +
        "lication developer\r\nI want to be to query a composite for it\'s configuration err" +
        "ors")]
    [NUnit.Framework.CategoryAttribute("SdkSpecs")]
    [NUnit.Framework.CategoryAttribute("MetadataService")]
    [NUnit.Framework.CategoryAttribute("CompositeMetadata")]
    [NUnit.Framework.CategoryAttribute("Configuration")]
    public partial class CompositeReportsConfigurationErrorsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CompositeReportsConfigurationErrors.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Composite reports configuration errors", "In order to learn if my composite app is configured correctly\r\nAs a composite app" +
                    "lication developer\r\nI want to be to query a composite for it\'s configuration err" +
                    "ors", ProgrammingLanguage.CSharp, new string[] {
                        "SdkSpecs",
                        "MetadataService",
                        "CompositeMetadata",
                        "Configuration"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Composite is incorrectly configured")]
        public virtual void CompositeIsIncorrectlyConfigured()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Composite is incorrectly configured", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("A composite that hasn\'t been configured");
#line 9
 testRunner.When("I call HasConfigurationErrors");
#line 10
 testRunner.Then("The result should be true");
#line 11
 testRunner.When("I call GetConfigurationErrors");
#line 12
 testRunner.Then("I receive an enumerable list of error descriptions with 1 or more items in it");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
