using System;
using Euclid.Common.Storage;
using Euclid.Common.Transport;

namespace Euclid.Common.Registry
{
<<<<<<< HEAD
	public class InMemoryRegistry<TRecord, TMessage> : IRegistry<TRecord, TMessage> 
		where TRecord : IRecord<TMessage>, new()
		where TMessage : IMessage
	{
		private static Dictionary<Guid, TRecord> _records;

		protected InMemoryRegistry()
		{
			_records = new Dictionary<Guid, TRecord>();
		}

		public void Add(TRecord record)
		{
			if (!_records.ContainsKey(record.Identifier))
			{
				_records.Add(record.Identifier, record);
			}
		}

		public TRecord CreateRecord(TMessage message)
		{
			return new TRecord
			       	{
			       		Message = message,
			       		Identifier = Guid.NewGuid(),
			       		Created = DateTime.Now
			       	};
		}

		public TRecord GetCurrentRecord(Guid id)
		{
			var deletedRecord = default(TRecord);

			if (_records.ContainsKey(id))
			{
				deletedRecord = _records[id];
				_records.Remove(id);
			}

			return deletedRecord;
		}
	}
=======
    public class InMemoryRegistry<TRecord, TMessage> : IRegistry<TRecord, TMessage> 
        where TRecord : IRecord<TMessage>, new()
        where TMessage : IMessage
    {
        private readonly IBasicRecordRepository<TRecord, TMessage> _repository;

        public InMemoryRegistry(IBasicRecordRepository<TRecord, TMessage> repository)
        {
            _repository = repository;
        }

        public TRecord CreateRecord(TMessage message)
        {
            return _repository.Create(message);
        }

        public TRecord Get(Guid id)
        {
            return _repository.Retrieve(id);
        }

        public TRecord MarkAsComplete(Guid id)
        {
            var record = _repository.Retrieve(id);

            record.Completed = true;

            return _repository.Update(record);
        }

        public TRecord MarkAsFailed(Guid id, string message = null, string callStack = null)
        {
            var record = _repository.Retrieve(id);

            record.Completed = true;

            record.Error = true;

            if (!string.IsNullOrEmpty(message))
            {
                record.ErrorMessage = message;
            }

            if (!string.IsNullOrEmpty(callStack))
            {
                record.CallStack = callStack;
            }

            return _repository.Update(record);
        }
    }
>>>>>>> d58b1299407a895ca01e11b257f5f50b73023f5d
}